<html>
  <head>
    <title>BNF Parser</title>
    <style type="text/css">
      .displaydiv {
        width:        100%;
        overflow:     auto;
        white-space:  nowrap;
      }
      .rulespan {
        border:     1px solid #084;
        margin:     2px;
        display:    inline-block;
        text-align: center;
        background: rgba(150, 220, 80, .0625);
      }
      .tokenspan {
        border:     1px solid #800;
        margin:     2px;
        display:    inline-block;
        padding:    3px;
        text-align: center;
        background: #FDA; 
      }
    </style>
  </head>
  <body>
    <script type="text/javascript" src="bnfparser.js"></script>
    <script type="text/javascript" src="interpreter.js"></script>
    <textarea id="bnf" placeholder="BNF Here" cols="100" rows="15">
&lt;prog&gt;     ::= program &lt;decl seq&gt; begin &lt;stmt seq&gt; end
&lt;decl seq&gt; ::= &lt;decl&gt; | &lt;decl&gt; &lt;decl seq&gt;
&lt;stmt seq&gt; ::= &lt;stmt&gt; &lt;stmt seq&gt; | &lt;stmt&gt;
&lt;decl&gt;     ::= int  &lt;id list&gt; ;
&lt;id list&gt;  ::= &lt;id&gt; , &lt;id list&gt; | &lt;id&gt;
&lt;stmt&gt;     ::= &lt;assign&gt;|&lt;if&gt;|&lt;loop&gt;|&lt;output&gt;|&lt;input&gt;
&lt;assign&gt;   ::= &lt;id&gt; = &lt;exp&gt; ;
&lt;if&gt;       ::= if &lt;cond&gt; then &lt;stmt seq&gt; end ; | if &lt;cond&gt; then &lt;stmt seq&gt; else &lt;stmt seq&gt; end ;
&lt;loop&gt;     ::= while &lt;cond&gt; loop &lt;stmt seq&gt; end ;
&lt;input&gt;    ::= read &lt;id list&gt; ;
&lt;output&gt;   ::= write &lt;id list&gt; ;
&lt;cond&gt;	   ::= &lt;comp&gt; | ! &lt;cond&gt; | [ &lt;cond&gt; &amp;&amp; &lt;cond&gt; ] | [ &lt;cond&gt; or &lt;cond&gt; ]
&lt;comp&gt;     ::= ( &lt;op&gt; &lt;comp op&gt; &lt;op&gt; )
&lt;exp&gt;      ::= &lt;fac&gt; | &lt;fac&gt; + &lt;exp&gt; | &lt;fac&gt; - &lt;exp&gt;
&lt;fac&gt;      ::= &lt;op&gt; | &lt;op&gt; * &lt;fac&gt;
&lt;op&gt;       ::= &lt;int&gt; | &lt;id&gt; | ( &lt;exp&gt; )
&lt;comp op&gt;  ::= != | == | &lt; | &gt; | &lt;= | &gt;=
&lt;id&gt;       ::= &lt;let&gt;&lt;id&gt; | &lt;let&gt;&lt;int&gt; | &lt;let&gt;
&lt;let&gt;      ::= A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
&lt;int&gt;      ::= &lt;digit&gt;&lt;int&gt; | &lt;digit&gt;
&lt;digit&gt;    ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
</textarea>
    <textarea id="str" placeholder="String to Parse Here" cols="120" rows="15">
program int X , FACT ; begin
  FACT = 1;
  read X;
  while ( X > 0 ) loop
    write X ;
    FACT = FACT * X;
    X = X - 1 ;
  end ;
  write FACT , X ;
end
</textarea><br/>
    <button type="button" onclick="bnf_go()">Parse BNF</button>
    <div id="out" class="displaydiv"><i>Output goes here</i></div>
    <textarea cols="64"  rows="25" readonly id="pprint" placeholder="Pretty-printed CORE code will go here."></textarea>
    <textarea cols="128" rows="25" readonly id="conout" placeholder="Output from the interpreter to the left will appear here."></textarea><br/>
    <textarea cols="196" rows="10" placeholder="Enter any bulk input here; these should be integers separated by whitespace." id="bulkin"></textarea><br />
    <button type="button" onclick="interpreter_go()">Run Interpreter</button>
    <script type="text/javascript">
      function output_a(a) {
        if (a == undefined)
          return "???";
        if (a.type != "rule")
          return '<span class="tokenspan">' + a.name + '</span>';
        var res = '<span class="rulespan">' + bnf.nencode(a.name) + "<br/>";
        for (var i = 0; i < a.ast.length; ++i)
          res += output_a(a.ast[i]);
        return res + '</span>';
      }
      var ast;
      function bnf_go() {
        x = document.getElementById("bnf");
        y = document.getElementById("str");
        z = document.getElementById("out");
        p = document.getElementById("pprint");
        q = document.getElementById("conout");
        r = document.getElementById("bulkin");
        var rules = bnf.parse_rules(x.value);
        console.log(rules);
        ast = bnf.parse_string(y.value.trim(), rules);
        q.value = "";
        p.value = "";
        console.log(ast);
        if (ast && ast.type != "error") {
          z.innerHTML = output_a(ast);
        }
        else if (ast)
          z.innerHTML = "ERROR: Line " + ast.line + ", position " + ast.position + ": " + bnf.nencode(ast.error);
        else
          z.innerHTML = "A parsing error has occurred. No additional information is available.";
      }
      function interpreter_go() {
        p = document.getElementById("pprint");
        q = document.getElementById("conout");
        if (ast) {
          /*if (p.value[0] != '(') {
            try {
              q.value = bnf.operate_string(ast, p.value);
            } catch (e) { q.value = "An error occurred within the custom interpreter. Did you mean to use (interpreter) or (printer)?" + e; }
          } else {*/
            try {
              p.value = bnf.operate(ast, CORE.printer);
            } catch (e) { p.value = "An unexpected error occurred during pretty-printing."; }
            try {
              q.value = "";
              CORE.interpreter.input = r.value;
              var res = "\nProgram returned " + bnf.operate(ast, CORE.interpreter);
              q.value += res;
            } catch (e) { q.value = "An error occurred while running your code.\n\n" + e + "\n\nStack trace (if supported):\n" + e.stack; }
          //}
        }
        else q.value = "Please enter valid code in the above box and press 'Parse BNF' before running.";
      }
    </script>
  </body>
</html>
